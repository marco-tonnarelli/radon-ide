The final release of the RADON integrated framework realize a development environment giving access to the repositories of RADON artifacts and enabling the interaction with the following RADON tools: `Graphical Modeling Tool <https://winery.readthedocs.io/en/latest/user/index.html>`_ (GMT), `Verification Tool <https://radon-vt-documentation.readthedocs.io/en/latest/>`_ (VT), `Decomposition Tool <https://decomposition-tool.readthedocs.io/>`_ (DT), `Defect Prediction Tool <https://radon-h2020.github.io/radon-defect-prediction-api/>`_ (DPT), `Continuous Testing Tool <https://continuous-testing-tool.readthedocs.io/>`_ (CTT), `Template Library <https://template-library-radon.xlab.si/>`_ (TL) and the `Delivery Toolchain <https://radon-h2020.github.io/radon-delivery-toolchain/>`_.
These are the set of actions that can be performed by an authenticated RADON user:

- Create or open (if already created previously) a RADON workspace with a *modeling project* on it, providing access to the shared repositories of RADON artifacts and with the integrated RADON tools enabled;
- Availability of the Graphical Modeling Tool (GMT) to be invoked on the RADON-IDE to model application topologies;
- Availability of the Verification Tool, Decomposition Tool, Defect Prediction Tool, and the Continuous Testing Tool, that can be invoked by the RADON user to verify CDL specifications on the RADON models, to optimize the deployment of the applications and to find the defects on the Infrastracture as Code (IaC) blueprints, and to test applications, respectively;
- Export of the modelled application in TOSCA’s Cloud Service Archive (CSAR) format for the deployment;
- Start the deployment process of the CSAR by publishing it on the Template Library and by means of the Delivery Toolchain;
- Visualization of the deployment status and monitoring data on a browser window.

The above capabilities have been implemented by the customization of the Eclipse Che environment with the realization of a new RADON Stack (i.e a ready-to-go workspace), defining a custom `che devfile <https://www.eclipse.org/che/docs/che-7/end-user-guide/configuring-a-workspace-using-a-devfile/>`_ including the following elements:

- A project (named *radon-particles*) that clones in the RADON workspace the TOSCA modeling entities from the `RADON Particles <https://github.com/radon-h2020/radon-particles>`_ GitHub repository;
- The set of *Che plugins* and `Kubernetes components <https://kubernetes.io/docs/concepts/containers/>`_ that have been developed to integrate the RADON tools.

The technical details of the RADON tools integrated and used in the final release are listed below:

- *Graphical Modeling Tool*: integrated on the RADON IDE as a Kubernetes component. It enables the users to create, develop, and model TOSCA service templates (i.e. RADON models), representing the applications that are deployed using the RADON Orchestrator. The GMT is able to interact with files and folders from the "modeling project" inside the underlying Che workspace. It offers also the feature to package and save a CSAR of a selected RADON Model to the workspace in order to give the possibility to process it using other RADON tools or deploy it using the RADON Orchestrator.
- *Verification Tool*: integrated on the RADON IDE with a Che plugin and a Kubernetes component. The users are able to run the verification, correction and learning modes of the VT by right-clicking on any file with the extension ".cdl" and clicking on the *Verify*, *Correct* or *Learn* buttons in the resulting context menu. The result of the task is then displayed in a new output sub-window.
- *Decomposition Tool*: integrated on the RADON IDE with a Che plugin. It enables the users to access a public service that makes the DT available trough different programs, namely decomposition, optimization and enhancement using REST APIs. A user can perform a right-click on a service template (.yaml) and then click the “Optimize” button in the pop-up menu. After the optimization program completes, the service template is updated according to the optimal deployment scheme, and the minimum operating cost is printed in the “Output” window.
- *Defect Prediction Tool*: integrated on the RADON IDE with a Che plugin. It enables the users to identify potentially defective IaC blueprints. The user can interact with it by right-clicking on a YAML-based Ansible file or a Cloud Service Archive (CSAR), and click *Run detection*. The results (consisting of the metrics extracted from the script and its defect-proneness) are displayed in a new active tab.
- *Continuous Testing Tool*: integrated on the RADON IDE with a Che plugin and a Kubernetes component. A user can create CTT configuration file, which after being completed, can be executed again via a right-click on the configuration file and selecting "Execute test configuration".  The results of the tests are stored in the project folder.
- *Template Library*: integrated on the RADON IDE with a Che plugin. It enables the users to manage, store and retrieve the TOSCA modules and their implementations. The user can interact with it by right clicking on the file from file explorer or in the editor and select one of the dropdown options available.
- *Delivery Toolchain*: integrated on the RADON IDE with
    - A Che plugin for the `xOpera SaaS Orchestrator <https://xlab-si.github.io/xopera-opera/index.html>`_. It eneables the users to create and run deployment projects inside the xOpera SaaS Orchestrator;
    - A Che plugin implementing the *Configure CI* and *Trigger CI* commands to configure and trigger a CI/CD pipleline on a `Jenkins <https://www.jenkins.io/>`_ server in order to add more flexibility;
    - A Che plugin implementing the *Show deployment status* command to open the xOpera SaaS Orchestrator console from the IDE and the *Open Monitorig page* command to open the Monitoring Dashboard from the IDE.
